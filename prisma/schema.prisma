// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String  @id @unique
  email     String  @unique
  password  String
  confirmed Boolean @default(false)
  isPrivate Boolean @default(false)

  confirmationId String? @unique
  refreshToken   String? @unique

  roles Roles[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Profile       Profile?
  Followings    Follow[]        @relation("FollowingRelation")
  Followers     Follow[]        @relation("FollowersRelation")
  Threads       Thread[]
  PollVotes     PollVote[]
  Likes         Like[]
  Reposts       Repost[]
  HiddenThreads HiddenThreads[]
  HiddenUsers   HiddenUsers[]   @relation("HiddenUsers")
  HidedBy       HiddenUsers[]   @relation("HidedBy")

  @@map("users")
}

model HiddenUsers {
  userId String
  User   User   @relation("HiddenUsers", fields: [userId], references: [id], onDelete: Cascade)

  hiddenUserId String
  HiddenUser   User   @relation("HidedBy", fields: [hiddenUserId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([userId, hiddenUserId])
  @@unique([userId, hiddenUserId])
  @@map("hidden_users")
}

model Profile {
  pseudo      String @id @unique
  displayName String

  biography String?
  avatarUrl String?
  link      String?

  userId String @unique
  User   User   @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("profiles")
}

model Follow {
  followerId String
  Follower   User   @relation("FollowersRelation", fields: [followerId], references: [id], onDelete: Cascade)

  followingId String
  Following   User   @relation("FollowingRelation", fields: [followingId], references: [id], onDelete: Cascade)

  accepted Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([followerId, followingId])
  @@unique([followerId, followingId])
  @@map("follows")
}

model Thread {
  id           String  @id @unique
  content      String  @db.VarChar(500)
  subject      String? @db.VarChar(50)
  hiddenForAll Boolean @default(false)
  hiddenBy     String?

  userId String
  User   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  parentId String?
  Parent   Thread? @relation("ThreadsRelation", fields: [parentId], references: [id], onDelete: Cascade)

  Children      Thread[]        @relation("ThreadsRelation")
  Poll          Poll?
  Likes         Like[]
  Reposts       Repost[]
  HiddenThreads HiddenThreads[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("threads")
}

model HiddenThreads {
  userId String
  User   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  threadId String
  Thread   Thread @relation(fields: [threadId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([userId, threadId])
  @@unique([userId, threadId])
  @@map("hiddens")
}

model Like {
  userId String
  User   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  threadId String
  Thread   Thread @relation(fields: [threadId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([userId, threadId])
  @@unique([userId, threadId])
  @@map("likes")
}

model Repost {
  userId String
  User   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  threadId String
  Thread   Thread @relation(fields: [threadId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([userId, threadId])
  @@unique([userId, threadId])
  @@map("reposts")
}

model Poll {
  id String @id @unique

  threadId String @unique
  Thread   Thread @relation(fields: [threadId], references: [id], onDelete: Cascade)

  Options PollOption[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("polls")
}

model PollOption {
  id String @id @unique

  pollId String
  Poll   Poll   @relation(fields: [pollId], references: [id], onDelete: Cascade)

  content String @db.VarChar(25)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Votes PollVote[]

  @@map("poll_options")
}

model PollVote {
  pollOptionId String
  PollOption   PollOption @relation(fields: [pollOptionId], references: [id], onDelete: Cascade)

  userId String
  User   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([pollOptionId, userId])
  @@map("poll_votes")
}

enum Roles {
  ADMIN
  USER
}
